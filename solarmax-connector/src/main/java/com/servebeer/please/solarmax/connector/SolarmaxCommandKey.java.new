package com.servebeer.please.solarmax.communicator.connector;

public enum SolarmaxCommandKey {

        // final Map<SolarmaxCommandKey, SolarmaxCommand> solarmaxCommands = new HashMap<SolarmaxCommandKey, SolarmaxCommand>() {
        //         {
        //                 put(SolarmaxCommandKey.ADR, new SolarmaxCommand(0, SolarmaxCommandKey.ADR, "Address",
        //                                 "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.TYP,
        //                                 new SolarmaxCommand(1, SolarmaxCommandKey.TYP, "Type", "return \"0x\" . $i;"));
        //                 put(SolarmaxCommandKey.SWV, new SolarmaxCommand(2, SolarmaxCommandKey.SWV, "Software version",
        //                                 "return sprintf(\"%1.1f\", hexdec($i) / 10 );"));
        //                 put(SolarmaxCommandKey.E1D, new SolarmaxCommand(9, SolarmaxCommandKey.E1D, "???Error 1, day???",
        //                                 "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E1M, new SolarmaxCommand(10, SolarmaxCommandKey.E1M,
        //                                 "???Error 1, month???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E1h, new SolarmaxCommand(11, SolarmaxCommandKey.E1h,
        //                                 "???Error 1, hour???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E1m, new SolarmaxCommand(12, SolarmaxCommandKey.E1m,
        //                                 "???Error 1, minute???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E21, new SolarmaxCommand(13, SolarmaxCommandKey.E21,
        //                                 "???Error 2, number???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E2D, new SolarmaxCommand(14, SolarmaxCommandKey.E2D,
        //                                 "???Error 2, day???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E2M, new SolarmaxCommand(15, SolarmaxCommandKey.E2M,
        //                                 "???Error 2, month???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E2h, new SolarmaxCommand(16, SolarmaxCommandKey.E2h,
        //                                 "???Error 2, hour???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E2m, new SolarmaxCommand(17, SolarmaxCommandKey.E2m,
        //                                 "???Error 2, minute???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E31, new SolarmaxCommand(18, SolarmaxCommandKey.E31,
        //                                 "???Error 3, number???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E3D, new SolarmaxCommand(19, SolarmaxCommandKey.E3D,
        //                                 "???Error 3, day???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E3M, new SolarmaxCommand(20, SolarmaxCommandKey.E3M,
        //                                 "???Error 3, month???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E3h, new SolarmaxCommand(21, SolarmaxCommandKey.E3h,
        //                                 "???Error 3, hour???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.E3m, new SolarmaxCommand(22, SolarmaxCommandKey.E3m,
        //                                 "???Error 3, minute???", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.KHR, new SolarmaxCommand(23, SolarmaxCommandKey.KHR, "Operating hours",
        //                                 "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.KDY, new SolarmaxCommand(24, SolarmaxCommandKey.KDY, "Energy today [Wh]",
        //                                 "return hexdec($i) * 100;"));
        //                 put(SolarmaxCommandKey.KLD, new SolarmaxCommand(25, SolarmaxCommandKey.KLD,
        //                                 "Energy yesterday [kWh]", "return hexdec($i) * 100;"));
        //                 put(SolarmaxCommandKey.KMT, new SolarmaxCommand(26, SolarmaxCommandKey.KMT,
        //                                 "Energy this month [kWh]", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.KLM, new SolarmaxCommand(27, SolarmaxCommandKey.KLM,
        //                                 "Energy last monh [kWh]", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.KYR, new SolarmaxCommand(28, SolarmaxCommandKey.KYR,
        //                                 "Energy this year [kWh]", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.KLY, new SolarmaxCommand(29, SolarmaxCommandKey.KLY,
        //                                 "Energy last year [kWh]", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.KT0, new SolarmaxCommand(30, SolarmaxCommandKey.KT0,
        //                                 "Energy total [kWh]", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.LAN, new SolarmaxCommand(31, SolarmaxCommandKey.LAN, "Language",
        //                                 "return hexdec($i);"));
        //                 // put(SolarmaxCommandKey.UDC,
        //                 //         new SolarmaxCommand(32, SolarmaxCommandKey.UDC, "DC voltage [mV]", "return hexdec($i) * 100;"));
        //                 put(SolarmaxCommandKey.UL1, new SolarmaxCommand(33, SolarmaxCommandKey.UL1, "AC voltage [mV]",
        //                                 "return hexdec($i) * 100;"));
        //                 put(SolarmaxCommandKey.UL2, new SolarmaxCommand(33, SolarmaxCommandKey.UL2, "AC voltage [mV]",
        //                                 "return hexdec($i) * 100;"));
        //                 put(SolarmaxCommandKey.UL3, new SolarmaxCommand(33, SolarmaxCommandKey.UL3, "AC voltage [mV]",
        //                                 "return hexdec($i) * 100;"));
        //                 // put(SolarmaxCommandKey.IDC,
        //                 //         new SolarmaxCommand(34, SolarmaxCommandKey.IDC, "DC current [mA]", "return hexdec($i) * 10;"));
        //                 put(SolarmaxCommandKey.IL1, new SolarmaxCommand(35, SolarmaxCommandKey.IL1, "AC current [mA]",
        //                                 "return hexdec($i) * 10;"));
        //                 put(SolarmaxCommandKey.IL2, new SolarmaxCommand(35, SolarmaxCommandKey.IL1, "AC current [mA]",
        //                                 "return hexdec($i) * 10;"));
        //                 put(SolarmaxCommandKey.IL3, new SolarmaxCommand(35, SolarmaxCommandKey.IL1, "AC current [mA]",
        //                                 "return hexdec($i) * 10;"));
        //                 put(SolarmaxCommandKey.PAC, new SolarmaxCommand(36, SolarmaxCommandKey.PAC, "AC power [mW]",
        //                                 "return hexdec($i) * 500;"));
        //                 put(SolarmaxCommandKey.PIN, new SolarmaxCommand(37, SolarmaxCommandKey.PIN,
        //                                 "Power installed [mW]", "return hexdec($i) * 500;"));
        //                 put(SolarmaxCommandKey.PRL, new SolarmaxCommand(38, SolarmaxCommandKey.PRL, "AC power [%]",
        //                                 "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.CAC, new SolarmaxCommand(39, SolarmaxCommandKey.CAC, "Start ups",
        //                                 "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.FRD,
        //                                 new SolarmaxCommand(40, SolarmaxCommandKey.FRD, "???", "return \"0x\" . $i;"));
        //                 put(SolarmaxCommandKey.SCD,
        //                                 new SolarmaxCommand(41, SolarmaxCommandKey.SCD, "???", "return \"0x\" . $i;"));
        //                 put(SolarmaxCommandKey.SE1,
        //                                 new SolarmaxCommand(42, SolarmaxCommandKey.SE1, "???", "return \"0x\" . $i;"));
        //                 put(SolarmaxCommandKey.SE2,
        //                                 new SolarmaxCommand(43, SolarmaxCommandKey.SE2, "???", "return \"0x\" . $i;"));
        //                 put(SolarmaxCommandKey.SPR,
        //                                 new SolarmaxCommand(44, SolarmaxCommandKey.SPR, "???", "return \"0x\" . $i;"));
        //                 put(SolarmaxCommandKey.TKK, new SolarmaxCommand(45, SolarmaxCommandKey.TKK,
        //                                 "Temerature Heat Sink", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.TNF, new SolarmaxCommand(46, SolarmaxCommandKey.TNF, "AC Frequency",
        //                                 "return hexdec($i / 100);"));
        //                 put(SolarmaxCommandKey.SYS, new SolarmaxCommand(47, SolarmaxCommandKey.SYS, "Operation State",
        //                                 "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.BDN, new SolarmaxCommand(48, SolarmaxCommandKey.BDN, "Build number",
        //                                 "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC00, new SolarmaxCommand(49, SolarmaxCommandKey.EC00,
        //                                 "Error-Code(?) 00", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC01, new SolarmaxCommand(50, SolarmaxCommandKey.EC01,
        //                                 "Error-Code(?) 01", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC02, new SolarmaxCommand(51, SolarmaxCommandKey.EC02,
        //                                 "Error-Code(?) 02", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC03, new SolarmaxCommand(52, SolarmaxCommandKey.EC03,
        //                                 "Error-Code(?) 03", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC04, new SolarmaxCommand(53, SolarmaxCommandKey.EC04,
        //                                 "Error-Code(?) 04", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC05, new SolarmaxCommand(54, SolarmaxCommandKey.EC05,
        //                                 "Error-Code(?) 05", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC06, new SolarmaxCommand(55, SolarmaxCommandKey.EC06,
        //                                 "Error-Code(?) 06", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC07, new SolarmaxCommand(56, SolarmaxCommandKey.EC07,
        //                                 "Error-Code(?) 07", "return hexdec($i);"));
        //                 put(SolarmaxCommandKey.EC08, new SolarmaxCommand(57, SolarmaxCommandKey.EC08,
        //                                 "Error-Code(?) 08", "return hexdec($i);"));
        //         }
        // };

        // Valid commands which returned a value during testing:
        DeviceAddress("ADR"), //
        UNKNOWN_AMM("AMM"), //
        BuildNumber("BDN"), //
        Startups("CAC"), //
        UNKNOWN_CID("CID"), //
        UNKNOWN_CPG("CPG"), //
        UNKNOWN_CPL("CPL"), //
        UNKNOWN_CP1("CP1"), //
        UNKNOWN_CP2("CP2"), //
        UNKNOWN_CP3("CP3"), //
        UNKNOWN_CP4("CP4"), //
        UNKNOWN_CP5("CP5"), //
        UNKNOWN_CYC("CYC"), // 
        UNKNOWN_DIN("DIN"), //
        UNKNOWN_DMO("DMO"), //
        UNKNOWN_ETH("ETH"), //
        UNKNOWN_FH2("FH2"), // 
        UNKNOWN_FQR("FQR"), //
        UNKNOWN_FWV("FWV"), //
        UNKNOWN_IAA("IAA"), //
        UNKNOWN_IED("IED"), //
        UNKNOWN_IEE("IEE"), //
        UNKNOWN_IEM("IEM"), //
        UNKNOWN_ILM("ILM"), //
        AcPhase1Current("IL1"), //
        AcPhase2Current("IL2"), //
        AcPhase3Current("IL3"), //
        UNKNOWN_IP4("IP4"), //
        UNKNOWN_ISL("ISL"), //
        UNKNOWN_ITS("ITS"), //
        EnergyGeneratedToday("KDY"), //
        UNKNOWN_KFS("KFS"), //
        OperatingHours("KHR"), //
        UNKNOWN_KHS("KHS"), //
        EnergyGeneratedYesterday("KLD"), //
        EnergyGeneratedLastMonth("KLM"), //
        EnergyGeneratedLastYear("KLY"), //
        EnergyGeneratedThisMonth("KMT"), //
        UNKNOWN_KTS("KTS"), //
        EnergyGeneratedTotal("KT0"), //
        EnergyGeneratedThisYear("KYR"), //
        Language("LAN"), //
        MacAddress("MAC"), //
        CurrentPowerGenerated("PAC"), //
        UNKNOWN_PAE("PAE"), //
        UNKNOWN_PAM("PAM"), //
        UNKNOWN_PDA("PDA"), //
        UNKNOWN_PDC("PDC"), //
        UNKNOWN_PFA("PFA"), //
        PowerInstalled("PIN"), //
        UNKNOWN_PLR("PLR"), //
        UNKNOWN_PPC("PPC"), //
        AcPowerPercent("PRL"), //
        UNKNOWN_PSF("PSF"), //
        UNKNOWN_PSR("PSR"), //
        UNKNOWN_PSS("PSS"), //
        UNKNOWN_QAC("QAC"), //
        UNKNOWN_QMO("QMO"), //
        UNKNOWN_QUC("QUC"), //
        UNKNOWN_RA1("RA1"), //
        UNKNOWN_RA2("RA2"), //
        UNKNOWN_RB1("RB1"), //
        UNKNOWN_RB2("RB2"), //
        UNKNOWN_REL("REL"), //
        UNKNOWN_RH1("RH1"), //
        UNKNOWN_RH2("RH2"), //
        UNKNOWN_RPR("RPR"), //
        UNKNOWN_RSD("RSD"), //
        UNKNOWN_SAC("SAC"), //
        UNKNOWN_SAL("SAL"), //
        UNKNOWN_SAM("SAM"), //
        UNKNOWN_SCH("SCH"), //
        UNKNOWN_SNM("SNM"), // IP Broadcast Address??
        UNKNOWN_SPS("SPS"), //
        UNKNOWN_SRD("SRD"), //
        UNKNOWN_SRS("SRS"), //
        SoftwareVersion("SWV"), //
        OperatingState("SYS"), //
        UNKNOWN_TCP("TCP"), //
        UNKNOWN_TI1("TI1"), //
        HeatSinkTemperature("TKK"), //
        UNKNOWN_TL1("TL1"), //
        UNKNOWN_TL3("TL3"), //
        UNKNOWN_TND("TND"), //
        AcFrequency("TNF"), //
        UNKNOWN_TNH("TNH"), //
        UNKNOWN_TNL("TNL"), //
        UNKNOWN_TP1("TP1"), //
        UNKNOWN_TP2("TP2"), //
        UNKNOWN_TP3("TP3"), //
        UNKNOWN_TV0("TV0"), //
        UNKNOWN_TV1("TV1"), //
        Type("TYP"), //
        UNKNOWN_UA2("UA2"), //
        UNKNOWN_UB2("UB2"), //
        UNKNOWN_UGD("UGD"), //
        UNKNOWN_UI1("UI1"), //
        UNKNOWN_UI2("UI2"), //
        UNKNOWN_UI3("UI3"), //
        UNKNOWN_ULH("ULH"), //
        UNKNOWN_ULL("ULL"), //
        AcPhase1Voltage("UL1"), //
        AcPhase2Voltage("UL2"), //
        AcPhase3Voltage("UL3"), //
        UNKNOWN_UMX("UMX"), //
        UNKNOWN_UM1("UM1"), //
        UNKNOWN_UM2("UM2"), //
        UNKNOWN_UM3("UM3"), //
        UNKNOWN_UPD("UPD"), //
        UNKNOWN_UZK("UZK"), //
        UNKNOWN_VCM("VCM"), //
        UNKNOWN("UNKNOWN") // really unknown - shouldn't ever be sent to the device
        ;

        // Valid commands which didn't return values (won't be implemented):
        // FFK, FRT, GCP, ITN, PLD, PLE, PLF, PLS, PPO, TV2, VLE, VLI, VLO

        private String commandKey;

        private SolarmaxCommandKey(String commandKey) {
                this.commandKey = commandKey;
        }

        public String getCommandKey() {
                return this.commandKey;
        }

        public static SolarmaxCommandKey getKeyFromString(String commandKey) {

                for (SolarmaxCommandKey key : SolarmaxCommandKey.values()) {
                        if (key.commandKey.equals(commandKey)) {
                                return key;
                        }
                }
                return UNKNOWN;
        }
}
